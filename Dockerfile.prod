# Production Dockerfile - Multi-stage build for smaller image
FROM golang:1.23-alpine AS builder

WORKDIR /app

# Install git for dependencies
RUN apk add --no-cache git

# Copy dependency files
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main ./cmd/main.go

# Production stage
FROM alpine:latest AS production

# Install ca-certificates and curl for healthchecks
RUN apk --no-cache add ca-certificates curl

WORKDIR /root/

# Copy the binary from builder stage
COPY --from=builder /app/main .

# Copy necessary directories
COPY --from=builder /app/templates ./templates
COPY --from=builder /app/assets ./assets

# Create logs directory
RUN mkdir -p storage/logs

# Create non-root user for security
RUN addgroup -g 1001 -S appgroup && \
    adduser -S appuser -u 1001 -G appgroup

# Change ownership of the app directory
RUN chown -R appuser:appgroup /root
USER appuser

# Expose production port
EXPOSE 8080

# Run the binary
CMD ["./main"]
